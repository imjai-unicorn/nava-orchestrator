// frontend/customer-chat/src/App.jsx
import React, { useState, useEffect } from 'react';
import Chat from './components/Chat';      // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
import api from './services/api';        // API Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Backend
import './styles/main.css';             // ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ä‡∏µ‡∏ï‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ

function App() {
  // --- State Management ---
  // ‡πÉ‡∏ä‡πâ useState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô class
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 'checking'
  const [apiHealth, setApiHealth] = useState({
    status: 'checking', // 'checking', 'healthy', 'unhealthy'
    message: 'Connecting to server...'
  });

  // --- Side Effects ---
  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logic ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
  // ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö init() ‡πÅ‡∏•‡∏∞ setInterval() ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
  useEffect(() => {
    console.log('üöÄ NAVA Chat App starting...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
    const performHealthCheck = async () => {
      try {
        const health = await api.checkHealth(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        if (health.status === 'healthy') {
          setApiHealth({
            status: 'healthy',
            message: health.database === 'connected' ? 'Connected ‚Ä¢ Database OK' : 'Connected'
          });
        } else {
          // ‡∏Å‡∏£‡∏ì‡∏µ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà healthy
          throw new Error('API reported an unhealthy status.');
        }
      } catch (error) {
        console.error('Health check failed:', error);
        setApiHealth({
          status: 'unhealthy',
          message: 'Disconnected'
        });
      }
    };

    // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
    performHealthCheck();

    // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÜ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const intervalId = setInterval(performHealthCheck, 30000);

    // 3. (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å) Cleanup function: ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á setInterval ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
    return () => {
      console.log('üßπ Clearing health check interval.');
      clearInterval(intervalId);
    };

  }, []); // dependency array ‡∏ß‡πà‡∏≤‡∏á [] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÉ‡∏´‡πâ useEffect ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  // --- Render ---
  // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ "‡∏ß‡∏≤‡∏î" UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  return (
    <div className="app-container">
      <header className="app-header">
        <h1>NAVA Customer Assistant</h1>
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å State ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á */}
        <div id="statusIndicator" className="status-indicator">
          <span 
            className="status-dot" 
            style={{ 
              backgroundColor: apiHealth.status === 'healthy' ? '#28a745' : (apiHealth.status === 'unhealthy' ? '#dc3545' : '#ffc107') 
            }}
          ></span>
          <span>{apiHealth.message}</span>
        </div>
      </header>

      <main className="main-content">
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÅ‡∏ä‡∏ó */}
        <Chat />
      </main>
    </div>
  );
}

export default App;